@startuml scheme-baseclass

!procedure $DISPLAY_IN_ROWS($notes)
    !while %strlen($notes)>0
        !$pos = %strpos($notes,"\n")
        !if $pos > 0
            !$name = %substr($notes, 0, $pos)
            !$notes = %substr($notes,$pos+2)
        !else
            !$name = $notes
            !$notes = ""
        !endif
        $name
    !endwhile
!endprocedure

abstract class MpiViSchema{
    # std::string name;
  
    + $DISPLAY_IN_ROWS("virtual void ValueIteration(MpiViUtility::ViParameters &viParameters, \nMpiViUtility::MpiParameters &mpiParameters, MpiViUtility::LogParameters &logParameters) = 0;")
    + virtual std::string GetName() = 0;
    + $DISPLAY_IN_ROWS("void calculateMetrics(std::vector<float> &j, MpiViUtility::ViParameters &viParameters, \nMpiViUtility::MpiParameters &mpiParameters, MpiViUtility::LogParameters &logParameters);")
}

class MpiViSchema01{
    + MpiViSchema01();
    + $DISPLAY_IN_ROWS("void ValueIteration(MpiViUtility::ViParameters &viParameters, \nMpiViUtility::MpiParameters &mpiParameters, MpiViUtility::LogParameters &logParameters) override;")
    + std::string GetName() override;
}

class MpiViSchema02{
    + MpiViSchema01();
    + $DISPLAY_IN_ROWS("void ValueIteration(MpiViUtility::ViParameters &viParameters, \nMpiViUtility::MpiParameters &mpiParameters, MpiViUtility::LogParameters &logParameters) override;")
    + std::string GetName() override;
}

class MpiViSchema03{
    + MpiViSchema01();
    + $DISPLAY_IN_ROWS("void ValueIteration(MpiViUtility::ViParameters &viParameters, \nMpiViUtility::MpiParameters &mpiParameters, MpiViUtility::LogParameters &logParameters) override;")
    + std::string GetName() override;
}

MpiViSchema <|-- MpiViSchema01
MpiViSchema <|-- MpiViSchema02
MpiViSchema <|-- MpiViSchema03

@enduml